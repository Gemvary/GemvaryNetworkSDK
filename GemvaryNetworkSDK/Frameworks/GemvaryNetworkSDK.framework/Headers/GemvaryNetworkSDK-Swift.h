#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 effective-4.1.50 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef GEMVARYNETWORKSDK_SWIFT_H
#define GEMVARYNETWORKSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GemvaryNetworkSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
enum NetWorkUserMode : NSInteger;

/// 新云端 网络 相关参数
SWIFT_CLASS("_TtC17GemvaryNetworkSDK16NewCloudNetParam")
@interface NewCloudNetParam : NSObject
/// 本地地址域名
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull domain;)
+ (NSString * _Nonnull)domain SWIFT_WARN_UNUSED_RESULT;
+ (void)setDomain:(NSString * _Nonnull)value;
/// 文件下载的地址链接 本地文件服务器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull fileDomain;)
+ (NSString * _Nonnull)fileDomain SWIFT_WARN_UNUSED_RESULT;
+ (void)setFileDomain:(NSString * _Nonnull)value;
/// App ID
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull appId;)
+ (NSString * _Nonnull)appId SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppId:(NSString * _Nonnull)value;
/// App 密钥
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull appSecret;)
+ (NSString * _Nonnull)appSecret SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppSecret:(NSString * _Nonnull)value;
/// 设置debug模式 默认为true
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL debug;)
+ (BOOL)debug SWIFT_WARN_UNUSED_RESULT;
+ (void)setDebug:(BOOL)value;
/// 设置用户模式 默认开发者模式
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum NetWorkUserMode userMode;)
+ (enum NetWorkUserMode)userMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserMode:(enum NetWorkUserMode)value;
/// 鉴权token
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull access_token;)
+ (NSString * _Nonnull)access_token SWIFT_WARN_UNUSED_RESULT;
+ (void)setAccess_token:(NSString * _Nonnull)value;
/// header新增字段适配
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull X_WX_ENV;)
+ (NSString * _Nonnull)X_WX_ENV SWIFT_WARN_UNUSED_RESULT;
+ (void)setX_WX_ENV:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 新云端 标签 相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK14AddressBookAPI")
@interface AddressBookAPI : NewCloudNetParam
/// 获取标签列表
+ (void)iotAddressBookTagListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 新增标签
+ (void)iotAddressBookTagAddWithTag:(NSString * _Nonnull)tag callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 删除标签
+ (void)iotAddressBookTagDeleteWithTag:(NSString * _Nonnull)tag callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// app类型 枚举值
/// 智能家居环境枚举值 0 君和社区  1：未来智家   2：坚朗之家  版本0.1.7
typedef SWIFT_ENUM_NAMED(NSInteger, AppType, "AppType", closed) {
/// 君和社区
  AppTypeGemvary = 0,
/// 未来智家(中性版本)
  AppTypeNeutral = 1,
/// 坚朗之家
  AppTypeKinlong = 2,
};


/// 旧智慧社区接口 相关参数设置
SWIFT_CLASS("_TtC17GemvaryNetworkSDK17CommunityNetParam")
@interface CommunityNetParam : NSObject
/// 域名 默认是君和社区的域名
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull domain;)
+ (NSString * _Nonnull)domain SWIFT_WARN_UNUSED_RESULT;
+ (void)setDomain:(NSString * _Nonnull)value;
/// 设置参数 0 君和社区  1：未来智家   2：坚朗之家  版本0.1.7
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum AppType appType;)
+ (enum AppType)appType SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppType:(enum AppType)value;
/// 腾讯云推送参数设置 信鸽推送的ID(更新后的接口需要设置该参数) 版本0.1.9
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull pushAppId;)
+ (NSString * _Nonnull)pushAppId SWIFT_WARN_UNUSED_RESULT;
+ (void)setPushAppId:(NSString * _Nonnull)value;
/// ID
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull appId;)
+ (NSString * _Nonnull)appId SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppId:(NSString * _Nonnull)value;
/// 密钥
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull appSecret;)
+ (NSString * _Nonnull)appSecret SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppSecret:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 云对讲相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK12CloudWorkAPI")
@interface CloudWorkAPI : CommunityNetParam
/// 传入logintoken
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull loginToken;)
+ (NSString * _Nonnull)loginToken SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoginToken:(NSString * _Nonnull)value;
/// 获取登录Token 测试zone: 9999 发布zone:ABCD
/// \param appId appID
///
/// \param zone 区域编码
///
/// \param callBack 返回回调
///
+ (void)accessLoginWithZone:(NSString * _Nonnull)zone callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 注册住户云对讲账号
/// \param account 住户账号
///
/// \param callBack 返回回调
///
+ (void)accountRegisterWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// SDK登录获取Token
/// \param appId APP ID
///
/// \param account 用户账号
///
/// \param callBack 回调
///
+ (void)userLoginWithAccount:(NSString * _Nonnull)account zone:(NSString * _Nonnull)zone callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// SDK登录获取Token(客户使用)
+ (void)appUserLoginWithAccount:(NSString * _Nonnull)account zone:(NSString * _Nonnull)zone callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 查询住户云对讲账号
/// \param accout 住户账号
///
/// \param callBack 返回回调
///
+ (void)accountWithAccout:(NSString * _Nonnull)accout callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 查询设备云对讲账号
/// \param device 设备码
///
/// \param callBack 返回回调
///
+ (void)deviceWithDevice:(NSString * _Nonnull)device callBack:(void (^ _Nonnull)(id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// 新云端 联系人 相关请求
SWIFT_CLASS("_TtC17GemvaryNetworkSDK11ContactsAPI")
@interface ContactsAPI : NewCloudNetParam
/// 添加联系人
+ (void)iotContactsAddWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 批量添加联系人
+ (void)iotContactsBatchAddWithName:(NSString * _Nonnull)name phone:(NSString * _Nonnull)phone description:(NSString * _Nonnull)description group:(NSString * _Nonnull)group tags:(NSArray<NSString *> * _Nonnull)tags callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 更新联系人信息
+ (void)iotContactsUpdateWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 更新联系人信息
+ (void)iotContactsDeleteWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取联系人列表
+ (void)iotContactsListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 根据关键字搜索联系人
+ (void)iotContactsSearchWithKeyword:(NSString * _Nonnull)keyword callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 新云端 设备端 相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK9DeviceAPI")
@interface DeviceAPI : NewCloudNetParam
/// 获取设备的GID
+ (void)deviceGidWithHwid:(NSString * _Nonnull)hwid callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 新云端 意见反馈 相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK11FeedbackAPI")
@interface FeedbackAPI : NewCloudNetParam
/// 上传意见反馈图片
+ (void)feedbackIotUploadImgWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 提交意见反馈
+ (void)feedbackIotWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 查询用户提交的所有意见反馈
+ (void)feedbackMyListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 意见反馈回复
+ (void)feedbackIotReplyWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 问题解决并评分
+ (void)feedbackIotConfirmWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取置顶反馈问题的回复列表
+ (void)feedbackMyFeedbackIdRepliesWithFeedbackId:(NSString * _Nonnull)feedbackId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 反馈问题未解决
+ (void)feedbackIotUnresolvedWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 智能家居 酒店功能接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK8HotelAPI")
@interface HotelAPI : NewCloudNetParam
/// 酒店列表
+ (void)hotelListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack SWIFT_DEPRECATED_MSG("接口废弃");
/// 酒店房间列表
+ (void)hotelUnitTreeWithHotelCode:(NSString * _Nonnull)hotelCode callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack SWIFT_DEPRECATED_MSG("接口废弃");
/// 绑定设备
+ (void)smartBindSkillDeviceWithPlat:(NSString * _Nonnull)plat devCode:(NSString * _Nonnull)devCode type:(NSInteger)type devSn:(NSString * _Nonnull)devSn callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 设备详情
+ (void)smartSkillDeviceWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 解绑设备
+ (void)smartUnbindSkillDeviceWithType:(NSInteger)type devId:(NSString * _Nonnull)devId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 工程用户登录
/// \param username 用户名（手机号）
///
/// \param password 密码
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)authEngineerLoginWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取酒店项目列表
+ (void)engHotelListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取指定酒店房屋组织结构
+ (void)engHotelUnitTreeWithHotelCode:(NSString * _Nonnull)hotelCode callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取社区项目列表
+ (void)engZoneListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取指定项目房屋组织结构
+ (void)engZoneUnitTreeWithZoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 旧款智能家居 参数设置
SWIFT_CLASS("_TtC17GemvaryNetworkSDK17SmartHomeNetParam")
@interface SmartHomeNetParam : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull domain;)
+ (NSString * _Nonnull)domain SWIFT_WARN_UNUSED_RESULT;
+ (void)setDomain:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 旧款 智能家居 新API
SWIFT_CLASS("_TtC17GemvaryNetworkSDK14JHCloudWorkAPI")
@interface JHCloudWorkAPI : SmartHomeNetParam
/// 组ID 默认为 GID_GEMVARY
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull gid;)
+ (NSString * _Nonnull)gid SWIFT_WARN_UNUSED_RESULT;
+ (void)setGid:(NSString * _Nonnull)value;
/// 传入logintoken
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull loginToken;)
+ (NSString * _Nonnull)loginToken SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoginToken:(NSString * _Nonnull)value;
/// 用户绑定设备
/// \param account 要绑定的帐号
///
/// \param devcode 要绑定的设备码
///
/// \param callBack 回调
///
+ (void)deviceBindWithAccount:(NSString * _Nonnull)account devcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户通过分享码绑定设备
/// \param account 要绑定的帐号
///
/// \param sharecode 要绑定设备的分享码
///
/// \param callBack 回调
///
+ (void)sharecodeBindWithAccount:(NSString * _Nonnull)account sharecode:(NSString * _Nonnull)sharecode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取绑定设备的用户列表
/// \param devcode 设备码
///
/// \param callBack 回调
///
+ (void)getUsersWithDevcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户绑定设备， 主账号绑定设备
/// \param devCode 设备码
///
/// \param account 用户账号
///
/// \param callBack 房间号
///
///
/// returns:
/// 返回回调
+ (void)bindDeviceWithDevCode:(NSString * _Nonnull)devCode account:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户解绑设备， 主账号解绑时将解绑已绑定的设备，同时也解绑子账号的绑定关系，子账号解绑时，仅解绑与子账号的绑定关系
/// \param account 用户账号
///
/// \param devcode 设备码
///
/// \param callBack 回调
///
+ (void)unBindDeviceWithAccount:(NSString * _Nonnull)account devcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户获取已绑定的设备列表
/// \param account 用户账号
///
/// \param callBack 回调
///
+ (void)getDevicesWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户获取已绑定的设备列表
/// \param account 用户账号
///
/// \param callBack 返回回调内容
///
///
/// returns:
/// Void
+ (void)userDeviceListWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户选择主设备
/// \param account 用户账号
///
/// \param devcode 设备码
///
/// \param callBack 返回回调内容
///
///
/// returns:
/// Void
+ (void)selectMainDeviceWithAccount:(NSString * _Nonnull)account devcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户选择某个设备作为主设备进行控制
/// \param account 用户账号
///
/// \param devcode 设备码
///
/// \param callBack 返回回调内容
///
+ (void)setUseDeviceWithAccount:(NSString * _Nonnull)account devcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 管理员授权子账号绑定设备
/// \param account 用户账号
///
/// \param devCode 设备码
///
/// \param mainAccount 主账号
///
/// \param callBack 返回回调内容
///
///
/// returns:
/// Void
+ (void)authorizeBindWithAccount:(NSString * _Nonnull)account devCode:(NSString * _Nonnull)devCode mainAccount:(NSString * _Nonnull)mainAccount callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 管理员取消子账号绑定设备授权
/// \param account 用户账号
///
/// \param devCode 设备码
///
/// \param mainAccount 主账号
///
/// \param callBack 返回回调内容
///
///
/// returns:
/// Void
+ (void)authorizeUnbindWithAccount:(NSString * _Nonnull)account devCode:(NSString * _Nonnull)devCode mainAccount:(NSString * _Nonnull)mainAccount callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 管理员（主账号）获取分享码
/// \param account 用户账号
///
/// \param deviceid 设备逻辑id
///
/// \param timeout 超时时间
///
/// \param callBack 返回回调内容
///
+ (void)getShareCodeWithAccount:(NSString * _Nonnull)account deviceid:(NSInteger)deviceid timeout:(NSInteger)timeout callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 设备管理员（主账号）获取该设备下的子账号列表
/// \param devcode 设备码
///
/// \param callBack 返回回调内容
///
+ (void)getSubaccountsWithDevcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 手机端注册用户，在AbleCould和君和平台都注册该用户
/// \param account 用户账号
///
/// \param zoneCode 小区编码
///
/// \param unitNo 单元号
///
/// \param roomNo 房间号
///
/// \param callBack 返回回调内容
///
+ (void)userRegisterWithAccount:(NSString * _Nonnull)account zoneCode:(NSString * _Nonnull)zoneCode unitNo:(NSString * _Nonnull)unitNo roomNo:(NSString * _Nonnull)roomNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 设置报警回调的接口
/// \param url 需要接收消息信息的后台地址
///
/// \param callBack 返回回调内容
///
///
/// returns:
/// Void
+ (void)alarmCallbackWithUrl:(NSString * _Nonnull)url callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 拉取小度设备列表
/// \param callBack 返回回调内容
///
///
/// returns:
/// Void
+ (void)skillDeviceWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 当前主机绑定小度设备
/// \param devCode 主机设备码
///
/// \param type 类型(扩展用，暂时固定设置为0)
///
/// \param devId 小度设备码
///
/// \param callBack 返回回调内容
///
///
/// returns:
/// Void
+ (void)bindSkillDeviceWithDevCode:(NSString * _Nonnull)devCode type:(NSInteger)type devId:(NSString * _Nonnull)devId callBack:(void (^ _Nonnull)(id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 新云端 产测工具 相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK11MassProdAPI")
@interface MassProdAPI : NewCloudNetParam
/// 注册设备
+ (void)massProdRegisterDeviceWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 添加设备
+ (void)iotMassProdAddDeviceWithSpaceId:(NSString * _Nonnull)spaceId devAddr:(NSString * _Nonnull)devAddr manufacturerId:(NSString * _Nonnull)manufacturerId productId:(NSString * _Nonnull)productId qualityInspector:(NSString * _Nonnull)qualityInspector riu_id:(NSInteger)riu_id callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 新云端 报警消息 相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK10MessageAPI")
@interface MessageAPI : NewCloudNetParam
/// 查询报警消息列表
/// \param spaceId 空间ID
///
/// \param page 当前页，默认从0开始
///
/// \param size 每页记录数量，默认10条
///
/// \param callBack 结果回调
///
///
/// returns:
/// Void
+ (void)iotAlarmMessageWithSpaceId:(NSString * _Nonnull)spaceId page:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 报警消息设置为已读状态
/// \param ids 记录ID
///
/// \param callBack 结果回调
///
///
/// returns:
/// Void
+ (void)iotAlarmMessageReadWithIds:(NSString * _Nonnull)ids callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 删除报警消息
/// \param ids 记录ID
///
/// \param callBack 结果回调
///
///
/// returns:
/// Void
+ (void)iotAlarmMessageDeleteWithIds:(NSString * _Nonnull)ids callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 查询提醒消息
+ (void)iotRemindMessageWithSpaceId:(NSString * _Nonnull)spaceId page:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 提醒消息设置为已读状态
+ (void)iotRemindMessageReadWithIds:(NSString * _Nonnull)ids callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 删除提醒信息
+ (void)iotRemindMessageDeleteWithIds:(NSString * _Nonnull)ids callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 根据日期查询报警信息列表
+ (void)iotAlarmMessageSpaceIdDateWithSpaceId:(NSString * _Nonnull)spaceId date:(NSString * _Nonnull)date page:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 根据日期删除报警信息
+ (void)iotAlarmMessageDeleteSpaceIdDateWithSpaceId:(NSString * _Nonnull)spaceId date:(NSString * _Nonnull)date callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 根据日期及设备类型查询执行提醒信息
+ (void)iotRemindMessageSpaceIdDateTypeWithSpaceId:(NSString * _Nonnull)spaceId date:(NSString * _Nonnull)date type:(NSString * _Nonnull)type page:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 根据日期及设备类型批量删除执行提醒信息
+ (void)iotRemindMessageDeleteSpaceIdDateTypeWithSpaceId:(NSString * _Nonnull)spaceId date:(NSString * _Nonnull)date type:(NSString * _Nonnull)type callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 设置枚举类型
typedef SWIFT_ENUM_NAMED(NSInteger, NetWorkUserMode, "NetWorkUserMode", closed) {
/// 开发模式
  NetWorkUserModeDebug = 0,
/// 测试模式
  NetWorkUserModeTest = 1,
/// 发布模式
  NetWorkUserModeRelease = 2,
};



/// 新云端 组织结构 相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK10OrgUnitAPI")
@interface OrgUnitAPI : NewCloudNetParam
/// 添加组织
+ (void)iotOrgUnitAddWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 添加组织及成员
+ (void)iotOrgUnitAddAndStaffsWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 更新组织信息
+ (void)iotOrgUnitUpdateWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 删除组织
+ (void)iotOrgUnitDeleteWithId:(NSInteger)id callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取组织列表
+ (void)iotOrgUnitListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 批量添加组织成员
+ (void)iotOrgUnitStaffBatchAddWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 删除组织成员
+ (void)iotOrgUnitStaffDeleteWithId:(NSInteger)id callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取组织成员列表
+ (void)iotOrgUnitIdStaffListWithId:(NSInteger)id callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 添加组织角色及权限
+ (void)iotOrgUnitRoleAddWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 更新组织角色及权限
+ (void)iotOrgUnitRoleUpdateWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 删除组织角色及权限
+ (void)iotOrgUnitRoleDeleteWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取组织角色列表
+ (void)iotOrgUnitOrgIdRoleListWithOrgId:(NSInteger)orgId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取成员角色列表
+ (void)iotOrgUnitStaffRoleListWithOrgId:(NSInteger)orgId account:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 授予成员角色
+ (void)iotOrgUnitStaffGrantRoleWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取指定组织角色的树形数据
+ (void)iotOrgUnitOrgIdRoleRoleIdTreeWithOrgId:(NSInteger)orgId roleId:(NSInteger)roleId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取组织角色相关的树形数据
+ (void)iotOrgUnitOrgIdRoletreeWithOrgId:(NSInteger)orgId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取当前组织下的设备分享给了那些用户
+ (void)iotOrgUnitOrgIdSharingDeviceUserListWithOrgId:(NSInteger)orgId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取用户相关组织下的设备分享给了那些用户
+ (void)iotOrgUnitSharingDeviceUserListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

/// 智慧社区相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK12PhoneWorkAPI")
@interface PhoneWorkAPI : CommunityNetParam
/// 获取登录验证码
/// \param account 账号(手机号码/邮箱)
///
/// \param callBack 回调
///
+ (void)phoneSmsCodeWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 登录账号
/// \param account 账号(手机号码/邮箱)
///
/// \param verifycode 验证码
///
/// \param callBack 回调
///
+ (void)phoneLoginWithAccount:(NSString * _Nonnull)account verifycode:(NSString * _Nonnull)verifycode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 登录(有社区功能)
/// \param account 账号(手机号码/邮箱)
///
/// \param verifycode 验证码
///
/// \param deviceId 设备码(ID)
///
/// \param callBack 回调
///
+ (void)phoneLoginWithAccount:(NSString * _Nonnull)account verifycode:(NSString * _Nonnull)verifycode deviceId:(NSString * _Nonnull)deviceId callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// (免)无验证码登录
/// \param zoneCode 小区编号
///
/// \param tokenauth 校验UUID
///
/// \param tokencode 手机免密码登录识别序号
///
/// \param callBack 回调
///
+ (void)phoneTokenLoginWithZoneCode:(NSString * _Nonnull)zoneCode tokenauth:(NSString * _Nonnull)tokenauth tokencode:(NSString * _Nonnull)tokencode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 请求小区的列表
/// \param account 账号(手机号码/邮箱)
///
/// \param callBack 回调
///
+ (void)phoneZoneListWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 切换小区 返回账号相关信息
/// \param account 账号(手机号码/邮箱)
///
/// \param zoneCode 小区编号
///
/// \param callBack 返回的回调
///
+ (void)phoneAuthWithAccount:(NSString * _Nonnull)account zoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 上传VoIP的Token信息
/// \param apns_token token
///
/// \param apns_type 推送类型 0:君和社区APP、1:睿讯家APP
///
/// \param callBack 回调
///
+ (void)phoneReportOstypeWithApns_token:(NSString * _Nonnull)apns_token apns_type:(NSInteger)apns_type callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取住户的房间信息
/// \param callBack 回调
///
+ (void)phoneOwnerRoomListWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 请求子账号列表
/// \param callBack 回调
///
+ (void)phoneAccountListWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 添加子账号的验证码请求
/// \param subaccount 子账号(手机号码/邮箱)
///
/// \param callBack 回调
///
+ (void)phoneGenerateValidatecodeWithSubaccount:(NSString * _Nonnull)subaccount callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 授权子账号
/// \param priaccount 主账号(手机号码/邮箱)
///
/// \param account 子账号(手机号码/邮箱)
///
/// \param verifycode 验证码
///
/// \param zonecode 小区编号
///
/// \param ablecloud 是否开启AbleCloud账号
///
/// \param callBack 回调
///
+ (void)phoneSubaccountAddWithPriaccount:(NSInteger)priaccount account:(NSString * _Nonnull)account verifycode:(NSString * _Nonnull)verifycode zonecode:(NSString * _Nonnull)zonecode ablecloud:(BOOL)ablecloud callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 删除子账号
/// \param account 子账号(手机号码/邮箱)
///
/// \param zonecode 小区编号
///
/// \param callBack 回调
///
+ (void)phoneSubaccountDelWithAccount:(NSString * _Nonnull)account zonecode:(NSString * _Nonnull)zonecode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取管家信息列表
/// \param callBack 回调
///
+ (void)phoneCallButlerWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取室内机/门口机的信息列表
/// \param callBack 回调
///
+ (void)phoneCallWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取蓝牙开锁的门口机列表
/// \param callBack 回调
///
+ (void)phoneOutdoorListWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 上传访客的开门信息 （有效时长 单位为小时）
/// \param code 上报的密码
///
/// \param fromTime 开始时间
///
/// \param roomNo 房间号
///
/// \param unitNo 单元号
///
/// \param validTime 有效时间 （单位为小时）
///
/// \param floorNo 楼层号
///
/// \param callBack 回调
///
+ (void)phoneRandpwdGenWithCode:(NSString * _Nonnull)code fromTime:(NSString * _Nonnull)fromTime roomNo:(NSString * _Nonnull)roomNo unitNo:(NSString * _Nonnull)unitNo validTime:(NSInteger)validTime floorNo:(NSString * _Nonnull)floorNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 上传访客开门信息 （有效时长 单位为秒）
/// \param code 上报的密码
///
/// \param fromTime 开始时间
///
/// \param roomNo 房间号
///
/// \param unitNo 单元号
///
/// \param validPeriod 有效时长（单位为秒）
///
/// \param floorNo 楼层号
///
/// \param callBack 回调内容
///
+ (void)phoneRandpwdGenWithCode:(NSString * _Nonnull)code fromTime:(NSString * _Nonnull)fromTime roomNo:(NSString * _Nonnull)roomNo unitNo:(NSString * _Nonnull)unitNo validPeriod:(NSInteger)validPeriod floorNo:(NSString * _Nonnull)floorNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 通话时发送打开门口机命令（兼容旧设备）
/// \param zoneCode 小区编号
///
/// \param devcode 门口机设备码
///
/// \param msgType 开锁类型
///
/// \param callBack 回调
///
+ (void)phoneMsgForwardWithZoneCode:(NSString * _Nonnull)zoneCode devcode:(NSString * _Nonnull)devcode msgType:(NSInteger)msgType callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 通话时发送打开门口机命令
/// \param zoneCode 小区编码
///
/// \param devcode 门口机设备码
///
/// \param callBack 回调
///
+ (void)phoneMsgForwardWithZoneCode:(NSString * _Nonnull)zoneCode devcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取钥匙包列表
/// \param callBack 回调
///
+ (void)phoneGetAllOutdoorWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 上报绑定的智能主机信息
/// \param deviceid 设备的逻辑ID
///
/// \param devcode 设备的物理ID(门口机机器码)
///
/// \param subdomain 子域域名
///
/// \param callBack 回调
///
+ (void)reportDevAblecloudWithDeviceid:(NSInteger)deviceid devcode:(NSString * _Nonnull)devcode subdomain:(NSString * _Nonnull)subdomain callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 添加邀请函
/// \param zonecode 小区编号
///
/// \param unitno 单元号
///
/// \param roomno 房间号
///
/// \param starttime 开始时间
///
/// \param endtime 结束时间
///
/// \param theme 主题
///
/// \param unitname 单元名
///
/// \param zonename 小区名字
///
/// \param address 小区地址
///
/// \param floorNo 楼层号
///
/// \param dynamicPassword 动态密码
///
/// \param callBack 回调
///
+ (void)invitationCardAddWithZonecode:(NSString * _Nonnull)zonecode unitno:(NSString * _Nonnull)unitno roomno:(NSString * _Nonnull)roomno starttime:(NSString * _Nonnull)starttime endtime:(NSString * _Nonnull)endtime theme:(NSString * _Nonnull)theme unitname:(NSString * _Nonnull)unitname zonename:(NSString * _Nonnull)zonename address:(NSString * _Nonnull)address floorNo:(NSString * _Nonnull)floorNo dynamicPassword:(NSString * _Nonnull)dynamicPassword callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 设置账号免打扰模式
/// \param status 免打扰模式 0b00: 默认状态均不免打扰, 0b01: APP免打扰不设，仅设置落地呼叫免打扰, 0b10: 设置App免打扰，落地呼叫不设, 0b11: 设置App免打扰，设置落地呼叫免打扰 接口
///
/// \param callBack 回调
///
+ (void)setAccountUndisturbedWithStatus:(NSInteger)status callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取自主注册验证码
/// \param account 账号(手机号码/邮箱)
///
/// \param callBack 回调
///
+ (void)getVerificationCodeWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 验证用户自主注册验证码
/// \param account 账号(手机号码/邮箱)
///
/// \param verifycode 验证码
///
/// \param callBack 回调
///
+ (void)userRegisteredWithAccount:(NSString * _Nonnull)account verifycode:(NSString * _Nonnull)verifycode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户自助添加小区及房间信息
/// \param zoneName 小区名字
///
/// \param roomName 房间名字
///
/// \param callBack 回调
///
+ (void)userRoomAddWithZoneName:(NSString * _Nonnull)zoneName roomName:(NSString * _Nonnull)roomName callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取用户自助添加的房间信息列表
/// \param callBack 回调
///
+ (void)userRoomListWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 删除用户自主添加的房间信息
/// \param id 房间的唯一ID
///
/// \param callBack 回调
///
+ (void)userRoomDeteleWithId:(NSInteger)id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 退出登录
/// \param callBack 回调
///
+ (void)phoneLogoutWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
+ (void)userFaceWithId:(NSInteger)id status:(NSInteger)status callBack:(void (^ _Nonnull)(id _Nullable))callBack SWIFT_DEPRECATED;
/// 用户自助删除人脸
/// \param id 要删除的人脸ID
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)userFaceDeleteIDWithId:(NSInteger)id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取用户自助录入的人脸列表
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)userFacesGetListWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取停车场月租卡缴费记录
/// \param account 账号
///
/// \param carNo 车牌号码
///
/// \param page 页码下标
///
/// \param size 数量大小
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)parkingMonthlyCardPaymentRecordWithAccount:(NSString * _Nonnull)account carNo:(NSString * _Nonnull)carNo page:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 提交月租卡申请
/// \param carNo 车牌号
///
/// \param contactName 车主姓名
///
/// \param cardTypeId 月租卡类型
///
/// \param startDate 有效时间 开始
///
/// \param endDate 有效时间 结束
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)parkingNewMonthlyCardAppWithCarNo:(NSString * _Nonnull)carNo contactName:(NSString * _Nonnull)contactName cardTypeId:(NSString * _Nonnull)cardTypeId startDate:(NSString * _Nonnull)startDate endDate:(NSString * _Nonnull)endDate callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 查询月租卡申请详情
/// \param id 月租卡ID
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)parkingMonthlyCardAppIDWithId:(NSString * _Nonnull)id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 撤销月租卡申请
/// \param id 月租卡ID
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)parkingCancelMonthlyCardAppIDWithId:(NSInteger)id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 查询月租卡申请列表
/// \param page 第几页
///
/// \param size 每页记录条数
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)parkingMonthlyCardAppPageSizeWithPage:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 查询车辆进出记录
/// \param carNo 车牌号
///
/// \param page 第几页
///
/// \param size 每页记录条数
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)parkingCarExitRecordWithCarNo:(NSString * _Nonnull)carNo page:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 查询用户车牌列表
/// \param account 用户账号
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)parkingUserCarListWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取小区Logo
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)zoneLogoWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取小区监控设备列表
/// \param floorNo 楼层号码
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)cameraListWithFloorNo:(NSString * _Nonnull)floorNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户一键登录
/// \param token 登录token
///
/// \param loginType 登录类型
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)oneKeyLoginWithToken:(NSString * _Nonnull)token loginType:(NSInteger)loginType callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 数字机安防配置
/// \param to_account 用户账号
///
/// \param data 参数数据(内容参考数字机相关协议)
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)ecurityConfigurationTo_account:(NSString * _Nonnull)to_account data:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取用户室内机列表
/// \param unitno 单元号
///
/// \param roomno 房间号
///
/// \param floorNo 楼层号
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)getZoneDeviceInfoListWithUnitno:(NSString * _Nonnull)unitno roomno:(NSString * _Nonnull)roomno floorNo:(NSString * _Nonnull)floorNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 手机招梯
/// \param zoneCode 小区编号
///
/// \param account 用户账号
///
/// \param unitNo 单元号
///
/// \param floorNo 楼层号
///
/// \param roomNo 房间号
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)liftElevatorWithZoneCode:(NSString * _Nonnull)zoneCode account:(NSString * _Nonnull)account unitNo:(NSString * _Nonnull)unitNo floorNo:(NSString * _Nonnull)floorNo roomNo:(NSString * _Nonnull)roomNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 手机乘梯
/// \param zoneCode 小区编号
///
/// \param unitNo 单元号
///
/// \param roomNo 房间号
///
/// \param floorNo 楼层号
///
/// \param account 用户账号
///
/// \param elevatorNo 电梯号
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)rideElevatorWithZoneCode:(NSString * _Nonnull)zoneCode unitNo:(NSString * _Nonnull)unitNo roomNo:(NSString * _Nonnull)roomNo floorNo:(NSString * _Nonnull)floorNo account:(NSString * _Nonnull)account elevatorNo:(NSString * _Nonnull)elevatorNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取用户可去的楼层列表
/// \param zoneCode 小区编号
///
/// \param unitNo 单元号
///
/// \param account 用户账号
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)elevatorUserFloorWithZoneCode:(NSString * _Nonnull)zoneCode unitNo:(NSString * _Nonnull)unitNo account:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 访客人脸照片验证
/// \param faceImg 照片信息
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)phoneVisitorFaceCheckWithFaceImg:(NSString * _Nonnull)faceImg callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 新增访客邀请函
/// \param body 参数内容
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)phoneInvitationVisitorCardAddWithBody:(NSDictionary<NSString *, id> * _Nonnull)body callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 删除访客邀请函
/// \param id 邀请函ID
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)phoneInvitationVisitorCardDelWithId:(NSInteger)id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 访客邀请函列表查询
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)phoneGetInvitationListWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 访客邀请函列表详情
/// \param id 邀请函ID
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)phoneGetInvitationDetailWithId:(NSInteger)id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 住户/管理处账号获取待审核邀请函列表
/// \param status 邀请函状态 0已审核 1待审核 2拒绝
///
/// \param page 第几页 从1开始
///
/// \param size 每页数量 建议为10
///
/// \param callBack 回调
///
///
/// returns:
/// Void
+ (void)findExamineVisitorInvitationWithStatus:(NSInteger)status page:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 住户/管理处账号访客邀请函审核
/// \param invitationId 邀请函ID
///
/// \param status 审核状态 0已审核 2拒绝
///
/// \param callBack 回调
///
///
/// returns:
/// Void
+ (void)examineVisitorInvitationWithInvitationId:(NSString * _Nonnull)invitationId status:(NSInteger)status callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 判断当前APP的版本号
/// \param appID appID
///
/// \param callBack 回调
///
+ (void)checkAppVersionWithAppID:(int64_t)appID callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 修改上传的人脸关联的用户名称和状态
/// \param id 人脸录入ID
///
/// \param userName 用户名称
///
/// \param callBack 返回回调
///
///
/// returns:
/// Void
+ (void)userFaceWithId:(NSInteger)id userName:(NSString * _Nonnull)userName callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户自主修改人脸属性
/// \param id 人脸记录ID【必填】
///
/// \param userName 用户名称【必填】
///
/// \param bindUserAccount 绑定用户账号【可选】
///
/// \param callBack 闭包返回数据内容
///
///
/// returns:
/// Void
+ (void)userFaceWithId:(NSInteger)id userName:(NSString * _Nonnull)userName bindUserAccount:(NSString * _Nonnull)bindUserAccount callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户自主录入人脸 (管家时需要传入用户类型和业主账号)
/// \param jpegImage 人脸图片信息
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)userFaceUploadWithJpegImage:(NSData * _Nonnull)jpegImage callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 人脸录入上传数据
/// \param jpegImage 人脸图片信息
///
/// \param name 名字
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)userFaceUploadWithJpegImage:(NSData * _Nonnull)jpegImage name:(NSString * _Nonnull)name callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户自主录入人脸 (管家时需要传入用户类型和业主账号)
/// \param jpegImage 人脸图片信息
///
/// \param name 名字
///
/// \param userAccount 用户账号
///
/// \param userDesc 用户描述
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)userFaceUploadWithJpegImage:(NSData * _Nonnull)jpegImage name:(NSString * _Nonnull)name userAccount:(NSString * _Nullable)userAccount userDesc:(NSInteger)userDesc callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取IM账号和群组信息的接口
/// \param account 账号
///
/// \param zoneCode 小区编码
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)imDataWithAccount:(NSString * _Nonnull)account zoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取第三方系统的Access Token
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)diandouAccessTokenWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 根据帐号获取第三方系统信息
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)diandouCustomerWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 注册并获取第三方COS系统帐号
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)diandouCosAccountWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取视频监控服务器配置接口
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)cctvConfigWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 新云对讲发起呼叫API
/// \param data 参数数据
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)newPhoneCallWithData:(NSDictionary<NSString *, id> * _Nonnull)data callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 新云对讲返回应答内容
/// \param data 参数数据
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)phoneCallResponseWithData:(NSDictionary<NSString *, id> * _Nonnull)data callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取云对讲的类型
/// \param zoneCode 小区编码
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)getCloudIntercomTypeWithZoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取住户的小区列表
/// \param account 账号
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)getZoneListWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 查看监控需要有同时在线人数限制
/// \param status 状态
///
/// \param ip IP地址
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)phoneObtainCameraWithStatus:(NSInteger)status ip:(NSString * _Nonnull)ip callBack:(void (^ _Nonnull)(id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 新云端 产品分类 相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK18ProductCategoryAPI")
@interface ProductCategoryAPI : NewCloudNetParam
/// 获取产品分类列表
/// \param callBack 返回闭包内容
///
///
/// returns:
/// 返回类型
+ (void)iotProductCategoryListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 根据父分类ID获取产品列表
/// \param parentId 父分类ID
///
/// \param callBack 返回闭包内容
///
///
/// returns:
/// 返回类型
+ (void)iotProductCategoryParentIdProductWithParentId:(NSString * _Nonnull)parentId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 智慧社区获取信息接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK11PstnWorkAPI")
@interface PstnWorkAPI : CommunityNetParam
/// 手机绑定ablecloud设备，上报绑定信息
/// \param account 用户账号
///
/// \param callBack 返回内容
///
///
/// returns:
/// Void
+ (void)pstn_open_ablecloudWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取来电号码版本号
/// \param callBack Void
///
+ (void)findCallVersionWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取所有来电号码
/// \param callBack Void
///
+ (void)allPhoneNumWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 上传用户意见反馈
/// \param account 登录账号
///
/// \param suggestion 建议内容
///
/// \param callBack Void
///
+ (void)reportFeedbackWithAccount:(NSString * _Nonnull)account suggestion:(NSString * _Nonnull)suggestion callBack:(void (^ _Nonnull)(id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 智慧社区公共接口API
SWIFT_CLASS("_TtC17GemvaryNetworkSDK10PubWorkAPI")
@interface PubWorkAPI : CommunityNetParam
/// 获取所有门口机及管理机信息
/// \param zoneCode 小区编号
///
/// \param callBack 回调
///
+ (void)allOutdoorDevWithZoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取当前有效的广告信息
/// \param zoneCode 小区编码
///
/// \param unitno 单元号
///
/// \param callBack 回调内容
///
+ (void)pubAdFileInfoWithZoneCode:(NSString * _Nonnull)zoneCode unitno:(NSString * _Nonnull)unitno callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 广告附件下载
/// \param fileId 文件ID
///
/// \param zoneCode 小区编码
///
/// \param callBack 回调内容
///
+ (void)pubAdDownloadWithFileId:(NSString * _Nonnull)fileId zoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取物业通知列表
/// \param zoneCode 小区编号
///
/// \param page 请求分页的编号
///
/// \param size 请求分页内通知的数量
///
/// \param callBack 回调
///
+ (void)pubNoticeListWithZoneCode:(NSString * _Nonnull)zoneCode page:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取呼叫管理机的信息列表
/// \param zoneCode 小区编号
///
/// \param callBack 回调
///
+ (void)pubSipListWithZoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用于来电显示名称和区分设备类型
/// \param zoneCode 小区编号
///
/// \param callBack 回调
///
+ (void)allIndoorDevWithZoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 旧款智能家居 推送 相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK11PushWorkAPI")
@interface PushWorkAPI : SmartHomeNetParam
/// 获取推送消息列表
/// \param target 消息目标账号
///
/// \param callBack 回调
///
+ (void)toListWithTarget:(NSString * _Nonnull)target callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取未读消息列表
/// \param target 消息目标账号
///
/// \param callBack 返回回调内容
///
+ (void)toUnreadListWithTarget:(NSString * _Nonnull)target callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取推送信息详情
/// \param target 消息目标帐号
///
/// \param message_type 消息类型
///
/// \param message_id 消息id
///
/// \param callBack 返回回调内容
///
+ (void)readUnreadMessageWithTarget:(NSString * _Nonnull)target message_type:(NSInteger)message_type message_id:(NSInteger)message_id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取未读消息条数
/// \param target 消息目标账号
///
/// \param callBack 返回回调内容
///
+ (void)countUnreadWithTarget:(NSString * _Nonnull)target callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取紧急报警消息列表
/// \param target 消息目标账号
///
/// \param callBack 返回回调内容
///
+ (void)toUrgentListWithTarget:(NSString * _Nonnull)target callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取紧急报警消息列表
/// \param target 消息目标账号
///
/// \param pageNumber 当前页数 (从 1 开始，默认为 1)
///
/// \param pageSize 每页显示的记录条数 (默认 100 条)
///
/// \param callBack 返回回调内容
///
+ (void)toUrgentListWithPageWithTarget:(NSString * _Nonnull)target pageNumber:(NSInteger)pageNumber pageSize:(NSInteger)pageSize callBack:(void (^ _Nonnull)(id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 新云端 常见工具 请求接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK10RequestAPI")
@interface RequestAPI : NewCloudNetParam
/// 获取验证码
+ (void)smsSendVerifyCodeWithPhone:(NSString * _Nonnull)phone type:(NSString * _Nonnull)type name:(NSString * _Nonnull)name callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 用户登录 VerificationCodeLogin / LocalPhoneLogin
+ (void)authLoginWithBody:(NSDictionary<NSString *, id> * _Nonnull)body callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 刷新ACCESS TOKEN
+ (void)authRefreshTokenWithToken:(NSString * _Nonnull)token callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取用户相关的项目列表
+ (void)projectUserListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 根据GID获取产品信息
+ (void)iotProductInfoWithGid:(NSString * _Nonnull)gid callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 订阅实时WebSocket接口
+ (void)iotMessageWithFid:(NSString * _Nonnull)fid token:(NSString * _Nonnull)token callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 网关代理请求
+ (void)iotGatewayProxyWithSpaceId:(NSString * _Nonnull)spaceId data:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 天气请求接口2
+ (void)iotWeatherV2WithProvinceName:(NSString * _Nonnull)provinceName cityName:(NSString * _Nonnull)cityName callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 海贝斯猫眼设备获取云存信息
+ (void)amazonGetObjByDevIdWithDeviceId:(NSString * _Nonnull)deviceId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// (海贝斯)删除一条消息记录
/// \param filePath 消息图片路径
///
/// \param callBack 回调内容
///
///
/// returns:
/// 返回类型(空)
+ (void)amazonDeleteWithFilePath:(NSString * _Nonnull)filePath callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 批量删除(清空)消息记录
/// \param deviceIds 设备ID数组
///
/// \param callBack 回调内容
///
///
/// returns:
/// 返回类型(空)
+ (void)amazonDeleteBatchWithDeviceIds:(NSArray<NSString *> * _Nonnull)deviceIds callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取用户相关房间列表
+ (void)projectUserRoomsWithZoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 查询已分享的设备列表
+ (void)iotSpaceIdSharedDeviceListWithSpaceId:(NSString * _Nonnull)spaceId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 根据设备参数获取产品信息
+ (void)iotProductInfoListWithBrand:(NSString * _Nonnull)brand classType:(NSString * _Nonnull)classType gatewayType:(NSString * _Nonnull)gatewayType callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 新云端 社区 相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK15ScsPhoneWorkAPI")
@interface ScsPhoneWorkAPI : NewCloudNetParam
/// 接口的参数信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull zoneCode;)
+ (NSString * _Nonnull)zoneCode SWIFT_WARN_UNUSED_RESULT;
+ (void)setZoneCode:(NSString * _Nonnull)value;
/// 请求小区的列表
/// \param account 账号(手机号码/邮箱)
///
/// \param callBack 回调
///
+ (void)phoneZoneListWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 切换小区 返回账号相关信息
/// \param account 账号(手机号码/邮箱)
///
/// \param zoneCode 小区编号
///
/// \param callBack 返回的回调
///
+ (void)phoneAuthWithAccount:(NSString * _Nonnull)account zoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 上传VoIP的Token信息
/// \param apns_token token
///
/// \param apns_type 推送类型 0:君和社区APP、1:睿讯家APP
///
/// \param callBack 回调
///
+ (void)phoneReportOstypeWithApns_token:(NSString * _Nonnull)apns_token apns_type:(NSInteger)apns_type callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取住户的房间信息
/// \param callBack 回调
///
+ (void)phoneOwnerRoomListWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 请求子账号列表
/// \param callBack 回调
///
+ (void)phoneAccountListWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 添加子账号的验证码请求
/// \param subaccount 子账号(手机号码/邮箱)
///
/// \param callBack 回调
///
+ (void)phoneGenerateValidatecodeWithSubaccount:(NSString * _Nonnull)subaccount callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 授权子账号
/// \param priaccount 主账号(手机号码/邮箱)
///
/// \param account 子账号(手机号码/邮箱)
///
/// \param verifycode 验证码
///
/// \param zonecode 小区编号
///
/// \param ablecloud 是否开启AbleCloud账号
///
/// \param callBack 回调
///
+ (void)phoneSubaccountAddWithPriaccount:(NSInteger)priaccount account:(NSString * _Nonnull)account verifycode:(NSString * _Nonnull)verifycode zonecode:(NSString * _Nonnull)zonecode ablecloud:(BOOL)ablecloud callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 删除子账号
/// \param account 子账号(手机号码/邮箱)
///
/// \param zonecode 小区编号
///
/// \param callBack 回调
///
+ (void)phoneSubaccountDelWithAccount:(NSString * _Nonnull)account zonecode:(NSString * _Nonnull)zonecode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取管家信息列表
/// \param callBack 回调
///
+ (void)phoneCallButlerWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取室内机/门口机的信息列表
/// \param callBack 回调
///
+ (void)phoneCallWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取蓝牙开锁的门口机列表
/// \param callBack 回调
///
+ (void)phoneOutdoorListWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 上传访客的开门信息 （有效时长 单位为小时）
/// \param code 上报的密码
///
/// \param fromTime 开始时间
///
/// \param roomNo 房间号
///
/// \param unitNo 单元号
///
/// \param validTime 有效时间 （单位为小时）
///
/// \param floorNo 楼层号
///
/// \param callBack 回调
///
+ (void)phoneRandpwdGenWithCode:(NSString * _Nonnull)code fromTime:(NSString * _Nonnull)fromTime roomNo:(NSString * _Nonnull)roomNo unitNo:(NSString * _Nonnull)unitNo validTime:(NSInteger)validTime floorNo:(NSString * _Nonnull)floorNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 上传访客开门信息 （有效时长 单位为秒）
/// \param code 上报的密码
///
/// \param fromTime 开始时间
///
/// \param roomNo 房间号
///
/// \param unitNo 单元号
///
/// \param validPeriod 有效时长（单位为秒）
///
/// \param floorNo 楼层号
///
/// \param callBack 回调内容
///
+ (void)phoneRandpwdGenWithCode:(NSString * _Nonnull)code fromTime:(NSString * _Nonnull)fromTime roomNo:(NSString * _Nonnull)roomNo unitNo:(NSString * _Nonnull)unitNo validPeriod:(NSInteger)validPeriod floorNo:(NSString * _Nonnull)floorNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 通话时发送打开门口机命令（兼容旧设备）
/// \param zoneCode 小区编号
///
/// \param devcode 门口机设备码
///
/// \param msgType 开锁类型
///
/// \param callBack 回调
///
+ (void)phoneMsgForwardWithZoneCode:(NSString * _Nonnull)zoneCode devcode:(NSString * _Nonnull)devcode msgType:(NSInteger)msgType callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 通话时发送打开门口机命令
/// \param zoneCode 小区编码
///
/// \param devcode 门口机设备码
///
/// \param callBack 回调
///
+ (void)phoneMsgForwardWithZoneCode:(NSString * _Nonnull)zoneCode devcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取钥匙包列表
/// \param callBack 回调
///
+ (void)phoneGetAllOutdoorWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 添加邀请函
/// \param zonecode 小区编号
///
/// \param unitno 单元号
///
/// \param roomno 房间号
///
/// \param starttime 开始时间
///
/// \param endtime 结束时间
///
/// \param theme 主题
///
/// \param unitname 单元名
///
/// \param zonename 小区名字
///
/// \param address 小区地址
///
/// \param callBack 回调
///
+ (void)invitationCardAddWithZonecode:(NSString * _Nonnull)zonecode unitno:(NSString * _Nonnull)unitno roomno:(NSString * _Nonnull)roomno starttime:(NSString * _Nonnull)starttime endtime:(NSString * _Nonnull)endtime theme:(NSString * _Nonnull)theme unitname:(NSString * _Nonnull)unitname zonename:(NSString * _Nonnull)zonename address:(NSString * _Nonnull)address floorNo:(NSString * _Nonnull)floorNo dynamicPassword:(NSString * _Nonnull)dynamicPassword callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 设置账号免打扰模式
/// \param status 免打扰模式 0b00: 默认状态均不免打扰, 0b01: APP免打扰不设，仅设置落地呼叫免打扰, 0b10: 设置App免打扰，落地呼叫不设, 0b11: 设置App免打扰，设置落地呼叫免打扰 接口
///
/// \param callBack 回调
///
+ (void)setAccountUndisturbedWithStatus:(NSInteger)status callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取用户自助添加的房间信息列表
/// \param callBack 回调
///
+ (void)userRoomListWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户自助删除人脸
/// \param id 要删除的人脸ID
///
/// \param callBack 返回结果回调
///
+ (void)userFaceDeleteIDWithId:(NSInteger)id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取用户自助录入的人脸列表
/// \param callBack 返回结果回调
///
+ (void)userFacesGetListWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取停车场月租卡缴费记录
+ (void)parkingMonthlyCardPaymentRecordWithAccount:(NSString * _Nonnull)account carNo:(NSString * _Nonnull)carNo page:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 提交月租卡申请
/// \param carNo 车牌号
///
/// \param cardTypeId 月租卡类型
///
/// \param startDate 有效时间 开始
///
/// \param endDate 有效时间 结束
///
/// \param callBack 返回内容
///
+ (void)parkingNewMonthlyCardAppWithCarNo:(NSString * _Nonnull)carNo cardTypeId:(NSString * _Nonnull)cardTypeId startDate:(NSString * _Nonnull)startDate endDate:(NSString * _Nonnull)endDate callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 查询月租卡申请详情
/// \param id 月租卡ID
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)parkingMonthlyCardAppIDWithId:(NSString * _Nonnull)id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 撤销月租卡申请
/// \param id 月租卡ID
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)parkingCancelMonthlyCardAppIDWithId:(NSInteger)id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 查询月租卡申请列表
/// \param page 第几页
///
/// \param size 每页记录条数
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)parkingMonthlyCardAppPageSizeWithPage:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 查询车辆进出记录
/// \param carNo 车牌号
///
/// \param page 第几页
///
/// \param size 每页记录条数
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)parkingCarExitRecordWithCarNo:(NSString * _Nonnull)carNo page:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 查询用户车牌列表
/// \param account 用户账号
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)parkingUserCarListWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取小区Logo
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)zoneLogoWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取小区监控设备列表
/// \param floorNo 楼层号码
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)cameraListWithFloorNo:(NSString * _Nonnull)floorNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取小区监控设备列表
/// \param floorNo 楼层号码
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)cameraListWithFloorNo:(NSString * _Nonnull)floorNo vendor:(NSString * _Nonnull)vendor callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 数字机安防配置
/// \param to_account 用户账号
///
/// \param data 参数数据
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)ecurityConfigurationTo_account:(NSString * _Nonnull)to_account data:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取用户室内机列表
/// \param unitno 单元号
///
/// \param roomno 房间号
///
/// \param floorNo 楼层号
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)getZoneDeviceInfoListWithUnitno:(NSString * _Nonnull)unitno roomno:(NSString * _Nonnull)roomno floorNo:(NSString * _Nonnull)floorNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 手机招梯
/// \param zoneCode 小区编号
///
/// \param account 用户账号
///
/// \param unitNo 单元号
///
/// \param floorNo 楼层号
///
/// \param roomNo 房间号
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)liftElevatorWithZoneCode:(NSString * _Nonnull)zoneCode account:(NSString * _Nonnull)account unitNo:(NSString * _Nonnull)unitNo floorNo:(NSString * _Nonnull)floorNo roomNo:(NSString * _Nonnull)roomNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 手机乘梯
/// \param zoneCode 小区编号
///
/// \param unitNo 单元号
///
/// \param roomNo 房间号
///
/// \param floorNo 楼层号
///
/// \param account 用户账号
///
/// \param elevatorNo 电梯号
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)rideElevatorWithZoneCode:(NSString * _Nonnull)zoneCode unitNo:(NSString * _Nonnull)unitNo roomNo:(NSString * _Nonnull)roomNo floorNo:(NSString * _Nonnull)floorNo account:(NSString * _Nonnull)account elevatorNo:(NSString * _Nonnull)elevatorNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取用户可去的楼层列表
/// \param zoneCode 小区编号
///
/// \param unitNo 单元号
///
/// \param account 用户账号
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)elevatorUserFloorWithZoneCode:(NSString * _Nonnull)zoneCode unitNo:(NSString * _Nonnull)unitNo account:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 访客人脸照片验证
/// \param faceImg 照片信息
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)phoneVisitorFaceCheckWithFaceImg:(NSString * _Nonnull)faceImg callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 新增访客邀请函
/// \param body 参数内容
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)phoneInvitationVisitorCardAddWithBody:(NSDictionary<NSString *, id> * _Nonnull)body callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 删除访客邀请函
/// \param id 邀请函ID
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)phoneInvitationVisitorCardDelWithId:(NSInteger)id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 访客邀请函列表查询
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)phoneGetInvitationListWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 访客邀请函列表详情
/// \param id 邀请函ID
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)phoneGetInvitationDetailWithId:(NSInteger)id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 住户/管理处账号获取待审核邀请函列表
/// \param status 邀请函状态 0已审核 1待审核 2拒绝
///
/// \param page 第几页 从1开始
///
/// \param size 每页数量 建议为10
///
/// \param callBack 回调
///
///
/// returns:
/// 返回类型 空
+ (void)findExamineVisitorInvitationWithStatus:(NSInteger)status page:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 住户/管理处账号访客邀请函审核
/// \param invitationId 邀请函ID
///
/// \param status 审核状态 0已审核 2拒绝
///
/// \param callBack 回调
///
///
/// returns:
/// 返回类型 空
+ (void)examineVisitorInvitationWithInvitationId:(NSString * _Nonnull)invitationId status:(NSInteger)status callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 修改上传的人脸关联的用户名称和状态
/// \param id 人脸录入ID
///
/// \param userName 用户名称
///
/// \param callBack 返回回调
///
+ (void)userFaceWithId:(NSInteger)id userName:(NSString * _Nonnull)userName callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户自主修改人脸属性
/// \param id 人脸记录ID【必填】
///
/// \param userName 用户名称【必填】
///
/// \param bindUserAccount 绑定用户账号【可选】
///
/// \param callBack 闭包返回数据内容
///
///
/// returns:
/// 返回参数
+ (void)userFaceWithId:(NSInteger)id userName:(NSString * _Nonnull)userName bindUserAccount:(NSString * _Nonnull)bindUserAccount callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户自主录入人脸 (管家时需要传入用户类型和业主账号) failedCallback: ((String?) -> Void)? = nil
+ (void)userFaceUploadWithJpegImage:(NSData * _Nonnull)jpegImage callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 人脸录入上传数据
+ (void)userFaceUploadWithJpegImage:(NSData * _Nonnull)jpegImage name:(NSString * _Nonnull)name callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户自主录入人脸 (管家时需要传入用户类型和业主账号) failedCallback: ((String?) -> Void)? = nil
+ (void)userFaceUploadWithJpegImage:(NSData * _Nonnull)jpegImage name:(NSString * _Nonnull)name userAccount:(NSString * _Nullable)userAccount userDesc:(NSInteger)userDesc callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取IM账号和群组信息的接口
/// \param account 账号
///
/// \param zoneCode 小区编码
///
/// \param callBack 返回结果回调
///
+ (void)imDataWithAccount:(NSString * _Nonnull)account zoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取第三方系统的Access Token
+ (void)diandouAccessTokenWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 根据帐号获取第三方系统信息
+ (void)diandouCustomerWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 注册并获取第三方COS系统帐号
+ (void)diandouCosAccountWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取视频监控服务器配置接口
+ (void)cctvConfigWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 新云对讲发起呼叫API
/// \param data 参数数据
///
/// \param callBack 返回回调
///
///
/// returns:
/// 返回回调
+ (void)newPhoneCallWithData:(NSDictionary<NSString *, id> * _Nonnull)data callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 新云对讲返回应答内容
/// \param data 参数数据
///
/// \param callBack 返回回调
///
///
/// returns:
/// 返回回调
+ (void)phoneCallResponseWithData:(NSDictionary<NSString *, id> * _Nonnull)data callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取移动端远程开锁配置（app请求接口失败时，app应是默认开启）
+ (void)phoneRemoteUnlockSettingWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 查看监控需要有同时在线人数限制
/// \param status 状态
///
/// \param ip IP地址
///
/// \param callBack 返回结果回调
///
///
/// returns:
/// Void
+ (void)phoneObtainCameraWithStatus:(NSInteger)status ip:(NSString * _Nonnull)ip callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 标记当前通知内容可读
+ (void)updateNoticeRecordWithId:(NSInteger)id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GemvaryNetworkSDK13ScsPubWorkAPI")
@interface ScsPubWorkAPI : NewCloudNetParam
/// 获取所有门口机及管理机信息
/// \param zoneCode 小区编号
///
/// \param callBack 回调
///
+ (void)allOutdoorDevWithZoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用于来电显示名称和区分设备类型
/// \param zoneCode 小区编号
///
/// \param callBack 回调
///
+ (void)allIndoorDevWithZoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 广告附件下载
/// \param fileId 文件ID
///
/// \param zoneCode 小区编码
///
/// \param callBack 回调内容
///
+ (void)pubAdDownloadWithFileId:(NSString * _Nonnull)fileId zoneCode:(NSString * _Nonnull)zoneCode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取当前有效的广告信息
/// \param zoneCode 小区编码
///
/// \param unitno 单元号
///
/// \param callBack 回调内容
///
+ (void)pubAdFileInfoWithZoneCode:(NSString * _Nonnull)zoneCode unitno:(NSString * _Nonnull)unitno callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取物业通知列表
/// \param zoneCode 小区编号
///
/// \param page 请求分页的编号
///
/// \param size 请求分页内通知的数量
///
/// \param callBack 回调
///
+ (void)pubNoticeListWithZoneCode:(NSString * _Nonnull)zoneCode page:(NSInteger)page size:(NSInteger)size callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 通过链接获取物业通知内容页面
+ (NSString * _Nonnull)pubNoticeApiKeyWithPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// 通过链接获取物业通知内容页面
+ (void)pubNotice;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// 新云端 智能家居 推送相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK16SmartPushWorkAPI")
@interface SmartPushWorkAPI : NewCloudNetParam
/// 获取推送消息列表
/// \param target 消息目标账号
///
/// \param callBack 回调
///
+ (void)toListWithTarget:(NSString * _Nonnull)target callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取未读消息列表
/// \param target 消息目标账号
///
/// \param callBack 返回回调内容
///
+ (void)toUnreadListWithTarget:(NSString * _Nonnull)target callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取推送信息详情
/// \param target 消息目标帐号
///
/// \param message_type 消息类型
///
/// \param message_id 消息id
///
/// \param callBack 返回回调内容
///
+ (void)readUnreadMessageWithTarget:(NSString * _Nonnull)target message_type:(NSInteger)message_type message_id:(NSInteger)message_id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取未读消息条数
/// \param target 消息目标账号
///
/// \param callBack 返回回调内容
///
+ (void)countUnreadWithTarget:(NSString * _Nonnull)target callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取紧急报警消息列表
/// \param target 消息目标账号
///
/// \param callBack 返回回调内容
///
+ (void)toUrgentListWithTarget:(NSString * _Nonnull)target callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取紧急报警消息列表
/// \param target 消息目标账号
///
/// \param pageNumber 当前页数 (从 1 开始，默认为 1)
///
/// \param pageSize 每页显示的记录条数 (默认 100 条)
///
/// \param callBack 返回回调内容
///
+ (void)toUrgentListWithPageWithTarget:(NSString * _Nonnull)target pageNumber:(NSInteger)pageNumber pageSize:(NSInteger)pageSize callBack:(void (^ _Nonnull)(id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 新云端 (旧款)智能家居 相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK12SmartWorkAPI")
@interface SmartWorkAPI : NewCloudNetParam
/// 组ID 默认为 GID_GEMVARY
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull gid;)
+ (NSString * _Nonnull)gid SWIFT_WARN_UNUSED_RESULT;
+ (void)setGid:(NSString * _Nonnull)value;
/// 用户绑定设备
/// \param account 要绑定的帐号
///
/// \param devcode 要绑定的设备码
///
/// \param callBack 回调
///
+ (void)deviceBindWithAccount:(NSString * _Nonnull)account devcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户通过分享码绑定设备
/// \param account 要绑定的帐号
///
/// \param sharecode 要绑定设备的分享码
///
/// \param callBack 回调
///
+ (void)sharecodeBindWithAccount:(NSString * _Nonnull)account sharecode:(NSString * _Nonnull)sharecode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 获取绑定设备的用户列表
/// \param devcode 设备码
///
/// \param callBack 回调
///
+ (void)getUsersWithDevcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户绑定设备， 主账号绑定设备
/// \param devCode 设备码
///
/// \param account 用户账号
///
/// \param callBack 房间号
///
///
/// returns:
/// 返回回调
+ (void)bindDeviceWithDevCode:(NSString * _Nonnull)devCode account:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户解绑设备， 主账号解绑时将解绑已绑定的设备，同时也解绑子账号的绑定关系，子账号解绑时，仅解绑与子账号的绑定关系
/// \param account 用户账号
///
/// \param devcode 设备码
///
/// \param callBack 回调
///
+ (void)unBindDeviceWithAccount:(NSString * _Nonnull)account devcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户获取已绑定的设备列表
/// \param account 用户账号
///
/// \param callBack 回调
///
+ (void)getDevicesWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户获取已绑定的设备列表
/// \param account 用户账号
///
/// \param callBack 返回回调内容
///
///
/// returns:
/// Void
+ (void)userDeviceListWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户选择主设备
/// \param account 用户账号
///
/// \param devcode 设备码
///
/// \param callBack 返回回调内容
///
///
/// returns:
/// Void
+ (void)selectMainDeviceWithAccount:(NSString * _Nonnull)account devcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 用户选择某个设备作为主设备进行控制
/// \param account 用户账号
///
/// \param devcode 设备码
///
/// \param callBack 返回回调内容
///
+ (void)setUseDeviceWithAccount:(NSString * _Nonnull)account devcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 管理员授权子账号绑定设备
/// \param account 用户账号
///
/// \param devCode 设备码
///
/// \param mainAccount 主账号
///
/// \param callBack 返回回调内容
///
///
/// returns:
/// Void
+ (void)authorizeBindWithAccount:(NSString * _Nonnull)account devCode:(NSString * _Nonnull)devCode mainAccount:(NSString * _Nonnull)mainAccount callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 管理员取消子账号绑定设备授权
/// \param account 用户账号
///
/// \param devCode 设备码
///
/// \param mainAccount 主账号
///
/// \param callBack 返回回调内容
///
///
/// returns:
/// Void
+ (void)authorizeUnbindWithAccount:(NSString * _Nonnull)account devCode:(NSString * _Nonnull)devCode mainAccount:(NSString * _Nonnull)mainAccount callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 管理员（主账号）获取分享码
/// \param account 用户账号
///
/// \param deviceid 设备逻辑id
///
/// \param timeout 超时时间
///
/// \param callBack 返回回调内容
///
+ (void)getShareCodeWithAccount:(NSString * _Nonnull)account deviceid:(NSInteger)deviceid timeout:(NSInteger)timeout callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 设备管理员（主账号）获取该设备下的子账号列表
/// \param devcode 设备码
///
/// \param callBack 返回回调内容
///
+ (void)getSubaccountsWithDevcode:(NSString * _Nonnull)devcode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 手机端注册用户，在AbleCould和君和平台都注册该用户
/// \param account 用户账号
///
/// \param zoneCode 小区编码
///
/// \param unitNo 单元号
///
/// \param roomNo 房间号
///
/// \param callBack 返回回调内容
///
+ (void)userRegisterWithAccount:(NSString * _Nonnull)account zoneCode:(NSString * _Nonnull)zoneCode unitNo:(NSString * _Nonnull)unitNo roomNo:(NSString * _Nonnull)roomNo callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 设置报警回调的接口
/// \param url 需要接收消息信息的后台地址
///
/// \param callBack 返回回调内容
///
///
/// returns:
/// Void
+ (void)alarmCallbackWithUrl:(NSString * _Nonnull)url callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 小度列表
+ (void)staticBindListWithCallBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 解绑小度
+ (void)staticBindDeleteWithBindDevId:(NSInteger)bindDevId callBack:(void (^ _Nonnull)(id _Nullable))callBack;
/// 绑定小度
+ (void)staticBindDeviceWithAccount:(NSString * _Nonnull)account devCode:(NSString * _Nonnull)devCode callBack:(void (^ _Nonnull)(id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 新云端 抓拍图片 相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK12SnapImageAPI")
@interface SnapImageAPI : NSObject
/// 上传抓拍图片
+ (void)snapImageUploadWithGid:(NSString * _Nonnull)gid callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 删除抓拍文件
+ (void)snapImageDeleteWithId:(NSString * _Nonnull)id callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 查询抓拍文件列表
+ (void)snapImageListWithGid:(NSString * _Nonnull)gid callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 新云端 空间 相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK8SpaceAPI")
@interface SpaceAPI : NewCloudNetParam
/// 添加空间
+ (void)iotSpaceAddWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 修改空间
+ (void)iotSpaceUpdateWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 删除空间
+ (void)iotSpaceDeleteWithSpaceId:(NSString * _Nonnull)spaceId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取空间列表
+ (void)iotSpaceListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取可用空间列表
+ (void)iotSpaceUsableListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取空间状态
+ (void)iotSpaceListStatWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 出租空间
+ (void)iotSpaceLeaseWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 收回空间
+ (void)iotSpaceTakeBackWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 转让空间
+ (void)iotSpaceTransferWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 分享设备给其他用户
+ (void)iotSpaceSharingDeviceWithSpaceId:(NSString * _Nonnull)spaceId toUserId:(NSString * _Nonnull)toUserId nickname:(NSString * _Nonnull)nickname gid:(NSString * _Nonnull)gid hwid:(NSString * _Nonnull)hwid callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 接受其他人分享的设备
+ (void)iotSpaceSharingDeviceApprovalWithShareId:(NSInteger)shareId status:(NSInteger)status callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取当前空间的设备分享给了哪些用户
+ (void)iotSpaceSharingDeviceUserListWithSpaceId:(NSString * _Nonnull)spaceId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 查询其他人分享的设备列表
+ (void)iotSpaceSharingDeviceListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 查询当前设备分享记录
+ (void)iotSpaceSharingDeviceGidListWithGid:(NSString * _Nonnull)gid callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 取消分享给某个用户
+ (void)iotSpaceSharingDeviceCancelWithShareId:(NSInteger)shareId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取指定空间的房东或租户
+ (void)iotSpaceRentListWithSpaceId:(NSString * _Nonnull)spaceId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取用户相关组织下空间的所有房东或租户
+ (void)iotOrgUnitRentListWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取指定组织下的空间房东或租户
+ (void)iotorgUnitRentListWithOrgId:(NSString * _Nonnull)orgId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 空间退租
+ (void)iotSpaceLeaseCancelWithSpaceId:(NSString * _Nonnull)spaceId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取指定组织下的空间列表
+ (void)iotOrgUnitSpaceListWithOrgId:(NSInteger)orgId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取其他用户可用的空间列表
+ (void)iotSpaceOtherUsableListWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 添加用户到指定空间的组织以及授权
+ (void)iotSpaceAddUserWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 从指定空间的组织移除用户与取消授权
+ (void)iotSpaceRemoveUserWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 修改空间用户名称和权限
+ (void)iotSpaceModifyUserWithSpaceId:(NSString * _Nonnull)spaceId account:(NSString * _Nonnull)account name:(NSString * _Nonnull)name perm:(NSInteger)perm callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
+ (void)iotSpaceSpaceIdUserListWithSpaceId:(NSString * _Nonnull)spaceId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取空间图片列表
+ (void)iotSpaceSpaceIdGalleryListWithSpaceId:(NSString * _Nonnull)spaceId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 添加图片到空间图库
+ (void)iotSpaceSpaceIdGalleryAddWithSpaceId:(NSString * _Nonnull)spaceId jpegImage:(NSData * _Nonnull)jpegImage callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 从空间图库删除图片
+ (void)iotSpaceSpaceIdGalleryDeleteGalleryIdWithSpaceId:(NSString * _Nonnull)spaceId galleryId:(NSString * _Nonnull)galleryId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取模版列表
+ (void)iotSpaceTemplateListWithCode:(NSString * _Nonnull)code callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 导出当前空间为模版
+ (void)iotSpaceExportTemplateWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 导出模版到当前空间
+ (void)iotSpaceIdImportTemplateIdWithSpaceId:(NSString * _Nonnull)spaceId templateId:(NSString * _Nonnull)templateId callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 新云端 用户 相关接口
SWIFT_CLASS("_TtC17GemvaryNetworkSDK7UserAPI")
@interface UserAPI : NewCloudNetParam
/// 注册账号
+ (void)userRegisterWithPhone:(NSString * _Nonnull)phone verifyCode:(NSString * _Nonnull)verifyCode callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 注销账号
/// \param verifyCode 注销账号验证码
///
/// \param callBack 返回内容
///
///
/// returns:
/// 返回类型
+ (void)userDeletionRegistrationWithVerifyCode:(NSString * _Nonnull)verifyCode callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取个人信息
+ (void)userInfoWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 停用账号
+ (void)userDisableWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 修改用户信息
+ (void)userUpdateWithNickname:(NSString * _Nonnull)nickname photo:(NSString * _Nonnull)photo callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 上传用户头像
+ (void)userUploadAvatarWithData:(NSString * _Nonnull)data callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 查询用户
+ (void)userSearchWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 查询分享设备列表
+ (void)userShareDeviceListWithAccount:(NSString * _Nonnull)account callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 天气信息请求接口(免费)
SWIFT_CLASS("_TtC17GemvaryNetworkSDK14WeatherInfoAPI")
@interface WeatherInfoAPI : NSObject
/// 免费API接口获取天气
/// \param id 城市ID
///
/// \param callBack 天气信息
///
///
/// returns:
/// Void
+ (void)apisWeatherWithId:(NSString * _Nonnull)id callBack:(void (^ _Nonnull)(id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 新云端 文件服务器相关请求
SWIFT_CLASS("_TtC17GemvaryNetworkSDK11WeexFileAPI")
@interface WeexFileAPI : NewCloudNetParam
/// 获取坚朗之家weex版本
+ (void)weexKinlongVersionWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 获取新云端weex版本号
+ (void)weexGemvaryVersionWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 下载坚朗之家weex的zip包到本地
+ (void)weexKinlongZipWithVersion:(NSString * _Nonnull)version callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 下载新云端weex的zip包到本地
+ (void)weexGemvaryZipWithVersion:(NSString * _Nonnull)version callBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
/// 请求ipa的版本
/// 企业账号时，文件服务器下载安装时需要实现该接口查询版本号
+ (void)kinlongIOSVersionWithCallBack:(void (^ _Nonnull)(NSInteger, id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GemvaryNetworkSDK13YinshiWorkAPI")
@interface YinshiWorkAPI : SmartHomeNetParam
/// 获取萤石设备token
/// \param accountId 账号ID
///
/// \param callBack 返回回调内容
///
+ (void)getSubtokenWithAccountId:(NSString * _Nonnull)accountId callBack:(void (^ _Nonnull)(id _Nullable))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
